# version: '3.8'

services:
    #################################################################
    #                          WEB APP                              #
    #################################################################
    pgdb:
        image: postgres:15
        container_name: postgres
        volumes:
            - postgres_data:/var/lib/postgresql/data/
            - ./srcs/postgres/logs/:/var/log/postgresql/
            - ./srcs/postgres/tools/dump_logs.sh:/docker-entrypoint-initdb.d/dump_logs.sh
        networks:
            - transcendance_net
            - elk
        restart: always
        env_file:
            - ./srcs/postgres/.env
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
            interval: 30s
            timeout: 10s
            retries: 5

    backend:
        image: django:trns
        container_name: backend
        build:
            context: ./srcs/api/
        volumes:
            - ./srcs/api:/var/www
            - ./srcs/vault/init/django-cred.json:/var/www/django-cred.json:ro
        networks:
            - transcendance_net
            - elk
        ports:
            - 8000:8000
        depends_on:
            # pgdb:
            #     condition: service_healthy
            vault:
                condition: service_healthy

        restart: on-failure

    frontend:
        build: ./srcs/frontend
        container_name: nextJs
        ports:
            - "3000:3000"  # Map host port 3000 to container port 3000
        volumes:
            - ./srcs/frontend/src/:/app/src/
        depends_on:
            - backend
        networks:
            - transcendance_net
        restart: on-failure

    #################################################################

    #################################################################
    #                         ELK stack                             #
    #################################################################
    elasticsearch:
        container_name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.10.1
        env_file:
            - ./srcs/ELK/.env
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=true
            - ELASTIC_USERNAME=elastic
        healthcheck:
            test: ["CMD-SHELL", "curl -s -u $${ELASTIC_USERNAME}:$${ELASTIC_PASSWORD} http://localhost:9200/_cat/health >/dev/null || exit 1"]
            interval: 30s
            timeout: 30s
            retries: 3
            start_period: 60s
        volumes:
            - ./srcs/ELK/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
            - es_data:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
            - "9300:9300"
        networks:
            - elk
        restart: always

    setup_kibana:
        image: curlimages/curl:latest
        container_name: setup_kibana
        volumes:
            - ./srcs/ELK/tools/init-kibana.sh:/init-kibana.sh
        command: ["sh", "/init-kibana.sh"]
        networks:
            - elk
        env_file:
            - ./srcs/ELK/.env
        depends_on:
            elasticsearch:
                condition: service_healthy
    
    logstash:
        container_name: logstash
        image: docker.elastic.co/logstash/logstash:8.10.1
        volumes:
            - ./srcs/ELK/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ./srcs/ELK/logstash/pipeline:/usr/share/logstash/pipeline
            - ./srcs/postgres/logs/:/var/log/postgres/
            - ./srcs/vault/logs:/var/log/vault
        ports:
            - "50000:50000"
            - "9600:9600"
        env_file:
            - ./srcs/ELK/.env
        environment:
            - ELASTICSEARCH_USERNAME=elastic
            - LS_JAVA_OPTS=-Xms256m -Xmx256m
        networks:
            - elk
        depends_on:
            elasticsearch:
                condition: service_healthy

    kibana:
        container_name: kibana
        image: docker.elastic.co/kibana/kibana:8.10.1
        depends_on:
            setup_kibana:
                condition: service_completed_successfully
        env_file:
            - ./srcs/ELK/.env
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_SSL_VERIFICATIONMODE=none
        volumes:
            - ./srcs/ELK/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
        ports:
            - "5601:5601"
        networks:
            - elk 
    #################################################################

    #################################################################
    #                           VAULT & WAF                         #
    #################################################################
    vault:
        image: hashicorp/vault:1.18
        container_name: vault
        ports:
            - "8200:8200"
        cap_add:
            - IPC_LOCK
        networks:
            - elk
            - transcendance_net
        volumes:
            - ./srcs/vault/data:/vault/data
            - ./srcs/vault/init:/vault/init
            - ./srcs/vault/config:/vault/config
            - ./srcs/vault/tools:/vault/tools
            - ./srcs/vault/logs:/vault/logs
            - ./srcs/vault/policies:/vault/policies
        environment:
            - VAULT_ADDR=http://127.0.0.1:8200
        env_file:
            - ./srcs/api/.env.example
            - ./srcs/postgres/.env
        command: ["/bin/sh", "-c", "/vault/tools/set_up.sh"]
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "sh", "-c", "ls /vault/init | grep django"]
            interval: 10s
            timeout: 5s
            retries: 5
        depends_on:
            pgdb:
                condition: service_healthy
    #################################################################


volumes:
    postgres_data:
    backend_files:
    es_data:
        driver: local

networks:
    transcendance_net:
    elk:
